// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: iguana.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Turtle_Ping_FullMethodName          = "/proto.Turtle/Ping"
	Turtle_SelectNote_FullMethodName    = "/proto.Turtle/SelectNote"
	Turtle_SubmitNote_FullMethodName    = "/proto.Turtle/SubmitNote"
	Turtle_SubmitVisitor_FullMethodName = "/proto.Turtle/SubmitVisitor"
)

// TurtleClient is the client API for Turtle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TurtleClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	SelectNote(ctx context.Context, in *SelectNoteRequest, opts ...grpc.CallOption) (*SelectNoteResponse, error)
	SubmitNote(ctx context.Context, in *SubmitNoteRequest, opts ...grpc.CallOption) (*SubmitNoteResponse, error)
	SubmitVisitor(ctx context.Context, in *SubmitVisitorRequest, opts ...grpc.CallOption) (*SubmitVisitorResponse, error)
}

type turtleClient struct {
	cc grpc.ClientConnInterface
}

func NewTurtleClient(cc grpc.ClientConnInterface) TurtleClient {
	return &turtleClient{cc}
}

func (c *turtleClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Turtle_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turtleClient) SelectNote(ctx context.Context, in *SelectNoteRequest, opts ...grpc.CallOption) (*SelectNoteResponse, error) {
	out := new(SelectNoteResponse)
	err := c.cc.Invoke(ctx, Turtle_SelectNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turtleClient) SubmitNote(ctx context.Context, in *SubmitNoteRequest, opts ...grpc.CallOption) (*SubmitNoteResponse, error) {
	out := new(SubmitNoteResponse)
	err := c.cc.Invoke(ctx, Turtle_SubmitNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turtleClient) SubmitVisitor(ctx context.Context, in *SubmitVisitorRequest, opts ...grpc.CallOption) (*SubmitVisitorResponse, error) {
	out := new(SubmitVisitorResponse)
	err := c.cc.Invoke(ctx, Turtle_SubmitVisitor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TurtleServer is the server API for Turtle service.
// All implementations must embed UnimplementedTurtleServer
// for forward compatibility
type TurtleServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	SelectNote(context.Context, *SelectNoteRequest) (*SelectNoteResponse, error)
	SubmitNote(context.Context, *SubmitNoteRequest) (*SubmitNoteResponse, error)
	SubmitVisitor(context.Context, *SubmitVisitorRequest) (*SubmitVisitorResponse, error)
	mustEmbedUnimplementedTurtleServer()
}

// UnimplementedTurtleServer must be embedded to have forward compatible implementations.
type UnimplementedTurtleServer struct {
}

func (UnimplementedTurtleServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTurtleServer) SelectNote(context.Context, *SelectNoteRequest) (*SelectNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectNote not implemented")
}
func (UnimplementedTurtleServer) SubmitNote(context.Context, *SubmitNoteRequest) (*SubmitNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNote not implemented")
}
func (UnimplementedTurtleServer) SubmitVisitor(context.Context, *SubmitVisitorRequest) (*SubmitVisitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVisitor not implemented")
}
func (UnimplementedTurtleServer) mustEmbedUnimplementedTurtleServer() {}

// UnsafeTurtleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TurtleServer will
// result in compilation errors.
type UnsafeTurtleServer interface {
	mustEmbedUnimplementedTurtleServer()
}

func RegisterTurtleServer(s grpc.ServiceRegistrar, srv TurtleServer) {
	s.RegisterService(&Turtle_ServiceDesc, srv)
}

func _Turtle_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurtleServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Turtle_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurtleServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turtle_SelectNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurtleServer).SelectNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Turtle_SelectNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurtleServer).SelectNote(ctx, req.(*SelectNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turtle_SubmitNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurtleServer).SubmitNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Turtle_SubmitNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurtleServer).SubmitNote(ctx, req.(*SubmitNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turtle_SubmitVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitVisitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurtleServer).SubmitVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Turtle_SubmitVisitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurtleServer).SubmitVisitor(ctx, req.(*SubmitVisitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Turtle_ServiceDesc is the grpc.ServiceDesc for Turtle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Turtle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Turtle",
	HandlerType: (*TurtleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Turtle_Ping_Handler,
		},
		{
			MethodName: "SelectNote",
			Handler:    _Turtle_SelectNote_Handler,
		},
		{
			MethodName: "SubmitNote",
			Handler:    _Turtle_SubmitNote_Handler,
		},
		{
			MethodName: "SubmitVisitor",
			Handler:    _Turtle_SubmitVisitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iguana.proto",
}
